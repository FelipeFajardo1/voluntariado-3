{"ast":null,"code":"export function ValidatePasswordFormat(password) {\n  const minLength = 8;\n  const hasUppercase = /[A-Z]/.test(password);\n  const hasLowercase = /[a-z]/.test(password);\n  const hasNumber = /[0-9]/.test(password);\n  const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\n  if (password.length < minLength) return {\n    valid: false,\n    message: \"Debe tener al menos 8 caracteres.\"\n  };\n  if (!hasUppercase) return {\n    valid: false,\n    message: \"Debe incluir al menos una letra mayúscula.\"\n  };\n  if (!hasLowercase) return {\n    valid: false,\n    message: \"Debe incluir al menos una letra minúscula.\"\n  };\n  if (!hasNumber) return {\n    valid: false,\n    message: \"Debe incluir al menos un número.\"\n  };\n  if (!hasSpecialChar) return {\n    valid: false,\n    message: \"Debe incluir un carácter especial.\"\n  };\n  return {\n    valid: true\n  };\n}\n_c = ValidatePasswordFormat;\nvar _c;\n$RefreshReg$(_c, \"ValidatePasswordFormat\");","map":{"version":3,"names":["ValidatePasswordFormat","password","minLength","hasUppercase","test","hasLowercase","hasNumber","hasSpecialChar","length","valid","message","_c","$RefreshReg$"],"sources":["C:/Users/User hp/Documents/ITP/PROYECTODIP/Voluntariado/frontend/src/services/validators/ValidatePasswordFormat.jsx"],"sourcesContent":["export function ValidatePasswordFormat(password) {\r\n  const minLength = 8;\r\n  const hasUppercase = /[A-Z]/.test(password);\r\n  const hasLowercase = /[a-z]/.test(password);\r\n  const hasNumber = /[0-9]/.test(password);\r\n  const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\r\n\r\n  if (password.length < minLength)\r\n    return { valid: false, message: \"Debe tener al menos 8 caracteres.\" };\r\n  if (!hasUppercase)\r\n    return { valid: false, message: \"Debe incluir al menos una letra mayúscula.\" };\r\n  if (!hasLowercase)\r\n    return { valid: false, message: \"Debe incluir al menos una letra minúscula.\" };\r\n  if (!hasNumber)\r\n    return { valid: false, message: \"Debe incluir al menos un número.\" };\r\n  if (!hasSpecialChar)\r\n    return { valid: false, message: \"Debe incluir un carácter especial.\" };\r\n\r\n  return { valid: true };\r\n}"],"mappings":"AAAA,OAAO,SAASA,sBAAsBA,CAACC,QAAQ,EAAE;EAC/C,MAAMC,SAAS,GAAG,CAAC;EACnB,MAAMC,YAAY,GAAG,OAAO,CAACC,IAAI,CAACH,QAAQ,CAAC;EAC3C,MAAMI,YAAY,GAAG,OAAO,CAACD,IAAI,CAACH,QAAQ,CAAC;EAC3C,MAAMK,SAAS,GAAG,OAAO,CAACF,IAAI,CAACH,QAAQ,CAAC;EACxC,MAAMM,cAAc,GAAG,wBAAwB,CAACH,IAAI,CAACH,QAAQ,CAAC;EAE9D,IAAIA,QAAQ,CAACO,MAAM,GAAGN,SAAS,EAC7B,OAAO;IAAEO,KAAK,EAAE,KAAK;IAAEC,OAAO,EAAE;EAAoC,CAAC;EACvE,IAAI,CAACP,YAAY,EACf,OAAO;IAAEM,KAAK,EAAE,KAAK;IAAEC,OAAO,EAAE;EAA6C,CAAC;EAChF,IAAI,CAACL,YAAY,EACf,OAAO;IAAEI,KAAK,EAAE,KAAK;IAAEC,OAAO,EAAE;EAA6C,CAAC;EAChF,IAAI,CAACJ,SAAS,EACZ,OAAO;IAAEG,KAAK,EAAE,KAAK;IAAEC,OAAO,EAAE;EAAmC,CAAC;EACtE,IAAI,CAACH,cAAc,EACjB,OAAO;IAAEE,KAAK,EAAE,KAAK;IAAEC,OAAO,EAAE;EAAqC,CAAC;EAExE,OAAO;IAAED,KAAK,EAAE;EAAK,CAAC;AACxB;AAACE,EAAA,GAnBeX,sBAAsB;AAAA,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
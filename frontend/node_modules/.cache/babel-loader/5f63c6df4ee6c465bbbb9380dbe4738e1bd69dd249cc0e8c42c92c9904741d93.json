{"ast":null,"code":"import axios from \"axios\";\nimport { logout } from \"../services/auth/AuthService.jsx\";\nconst URI = process.env.REACT_APP_URL_SERVER_VOLUNTARIADO;\nconst api = axios.create({\n  baseURL: URI,\n  withCredentials: true // Permite enviar cookies o credenciales en las peticiones\n});\napi.interceptors.response.use(response => response, async error => {\n  var _error$config, _error$response;\n  const reqUrl = (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url;\n\n  // Si el backend devuelve 401 (Unauthorized) al intentar obtener el perfil\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && reqUrl !== null && reqUrl !== void 0 && reqUrl.includes(\"/auth/perfil\")) {\n    try {\n      await logout(); // Limpia sesión o tokens en el cliente\n    } catch (logoutError) {\n      console.error(\"Error cerrando sesión:\", logoutError);\n    }\n\n    // Evita bucle infinito: solo redirige si no estás ya en /login\n    if (window.location.pathname !== \"/login\") {\n      window.location.href = \"/login\";\n    }\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","logout","URI","process","env","REACT_APP_URL_SERVER_VOLUNTARIADO","api","create","baseURL","withCredentials","interceptors","response","use","error","_error$config","_error$response","reqUrl","config","url","status","includes","logoutError","console","window","location","pathname","href","Promise","reject"],"sources":["C:/Users/User hp/Documents/ITP/PROYECTODIP/Voluntariado/frontend/src/config/AxiosConfig.jsx"],"sourcesContent":["import axios from \"axios\";\r\nimport { logout } from \"../services/auth/AuthService.jsx\";\r\n\r\nconst URI = process.env.REACT_APP_URL_SERVER_VOLUNTARIADO;\r\n\r\nconst api = axios.create({\r\n  baseURL: URI,\r\n  withCredentials: true, // Permite enviar cookies o credenciales en las peticiones\r\n});\r\n\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const reqUrl = error.config?.url;\r\n\r\n    // Si el backend devuelve 401 (Unauthorized) al intentar obtener el perfil\r\n    if (error.response?.status === 401 && reqUrl?.includes(\"/auth/perfil\")) {\r\n      try {\r\n        await logout(); // Limpia sesión o tokens en el cliente\r\n      } catch (logoutError) {\r\n        console.error(\"Error cerrando sesión:\", logoutError);\r\n      }\r\n\r\n      // Evita bucle infinito: solo redirige si no estás ya en /login\r\n      if (window.location.pathname !== \"/login\") {\r\n        window.location.href = \"/login\";\r\n      }\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAQ,kCAAkC;AAEzD,MAAMC,GAAG,GAAGC,OAAO,CAACC,GAAG,CAACC,iCAAiC;AAEzD,MAAMC,GAAG,GAAGN,KAAK,CAACO,MAAM,CAAC;EACvBC,OAAO,EAAEN,GAAG;EACZO,eAAe,EAAE,IAAI,CAAE;AACzB,CAAC,CAAC;AAEFH,GAAG,CAACI,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC1BD,QAAQ,IAAKA,QAAQ,EACtB,MAAOE,KAAK,IAAK;EAAA,IAAAC,aAAA,EAAAC,eAAA;EACf,MAAMC,MAAM,IAAAF,aAAA,GAAGD,KAAK,CAACI,MAAM,cAAAH,aAAA,uBAAZA,aAAA,CAAcI,GAAG;;EAEhC;EACA,IAAI,EAAAH,eAAA,GAAAF,KAAK,CAACF,QAAQ,cAAAI,eAAA,uBAAdA,eAAA,CAAgBI,MAAM,MAAK,GAAG,IAAIH,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEI,QAAQ,CAAC,cAAc,CAAC,EAAE;IACtE,IAAI;MACF,MAAMnB,MAAM,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,OAAOoB,WAAW,EAAE;MACpBC,OAAO,CAACT,KAAK,CAAC,wBAAwB,EAAEQ,WAAW,CAAC;IACtD;;IAEA;IACA,IAAIE,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,QAAQ,EAAE;MACzCF,MAAM,CAACC,QAAQ,CAACE,IAAI,GAAG,QAAQ;IACjC;EACF;EAEA,OAAOC,OAAO,CAACC,MAAM,CAACf,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeP,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}